datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../client_generated"
}

model Permissions {
  id              Int              @id @default(autoincrement())
  name            String
  label           String
  rolePermissions RolePermission[]
}

enum RoleType {
  OTHER
  SUPER_ADMIN
  GURU
  KEPALA_SEKOLAH
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  roleType        RoleType         @default(OTHER)
  rolePermissions RolePermission[]
  users           User[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  role         Role        @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permissions @relation(fields: [permissionId], references: [id])
  canRead      Boolean     @default(false)
  canWrite     Boolean     @default(false)
  canUpdate    Boolean     @default(false)
  canDelete    Boolean     @default(false)
  canRestore   Boolean     @default(false)
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  name                 String?
  password             String?
  roleId               Int
  role                 Role                  @relation(fields: [roleId], references: [id])
  nipNisn              String?
  nomerTelepon         String?               @unique
  tanggalLahir         DateTime?
  status               String?               @default("menunggu") //Setujui or menunggu
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  sessions             Session[]
  logers               Loger[]
  notifications        NotificationUser[]
  webPushSubscriptions WebPushSubscription[]

  jadwalGuru JadwalGuru[]

  jadwalMurid JadwalMurid[]

  absensiGuru AbsensiGuru[]
}

model Session {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum Process {
  CREATE
  UPDATE
  DELETE
  RESTORE
  LOGIN
  LOGOUT
}

model Loger {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  process   Process
  detail    String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  refId     String?
  message   String
  createdAt DateTime @default(now())

  // Hapus usersId Int[] dan readStatus global
  recipients NotificationUser[] // relasi ke receipt
}

model NotificationUser {
  // Join table (receipt)
  id             Int @id @default(autoincrement())
  userId         Int
  notificationId Int

  // status per user
  readStatus  Boolean   @default(false)
  readAt      DateTime?
  deliveredAt DateTime?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId]) // satu baris per user x notif
  @@index([userId, readStatus])
  @@index([notificationId])
}

model WebPushSubscription {
  id             Int       @id @default(autoincrement())
  userId         Int
  endpoint       String    @unique
  p256dh         String
  auth           String
  expirationTime DateTime?
  userAgent      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model JadwalGuru {
  id            Int       @id @default(autoincrement())
  userId        Int
  tahunAjaran   String?
  mataPelajaran String?
  kelas         String?
  grup          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleteAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  jadwalMurid JadwalMurid[]

  absensiGuru AbsensiGuru[]
}

model JadwalMurid {
  id           Int        @id @default(autoincrement())
  muridId      Int
  jadwalGuruId Int
  namaLengkap  String?
  kelas        String?
  kelamin      String?  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deleteAt     DateTime?
  user         User       @relation(fields: [muridId], references: [id], onDelete: Cascade)
  jadwalGuru   JadwalGuru @relation(fields: [jadwalGuruId], references: [id], onDelete: Cascade)
}

enum StatusAbsensi {
  HADIR
  IZIN
  SAKIT
  ALFA
}

model AbsensiGuru {
  id           Int           @id @default(autoincrement())
  jadwalGuruId Int
  userId       Int
  status       StatusAbsensi
  type         String?
  keterangan   String?
  document     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleteAt     DateTime?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jadwalGuru JadwalGuru @relation(fields: [jadwalGuruId], references: [id], onDelete: Cascade)
}
